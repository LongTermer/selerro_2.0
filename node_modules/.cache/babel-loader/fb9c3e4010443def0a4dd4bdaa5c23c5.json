{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCHzRB4ie5EHoh5HSRx9TK80yJOaBWMHps\",\n  authDomain: \"selerro-db.firebaseapp.com\",\n  databaseURL: \"https://selerro-db.firebaseio.com\",\n  projectId: \"selerro-db\",\n  storageBucket: \"selerro-db.appspot.com\",\n  messagingSenderId: \"266173470639\",\n  appId: \"1:266173470639:web:67c087e6381629dbf5415a\",\n  measurementId: \"G-Z35QEK9S2W\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"There was an error when creating user: \", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((accumulator, currentCollection) => {\n    accumulator[currentCollection.title.toLowerCase()] = currentCollection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // export const saveEmail = email => {\n//   const emailsRef = firebase.database().ref(\"newsletter-emails\");\n//   const newEmailRef = emailsRef.push();\n//   newEmailRef.set({ email });\n// };\n\nconst emailsRef = firestore.collection(\"newsletter-emails\");\nexport const saveEmail = (name, email) => {\n  const newEmailRef = emailsRef.push();\n  newEmailRef.set({\n    name,\n    email\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["C:/selerro-app/selerro/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","currentCollection","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","emailsRef","saveEmail","name","newEmailRef","push"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCHzRB4ie5EHoh5HSRx9TK80yJOaBWMHps\",\r\n  authDomain: \"selerro-db.firebaseapp.com\",\r\n  databaseURL: \"https://selerro-db.firebaseio.com\",\r\n  projectId: \"selerro-db\",\r\n  storageBucket: \"selerro-db.appspot.com\",\r\n  messagingSenderId: \"266173470639\",\r\n  appId: \"1:266173470639:web:67c087e6381629dbf5415a\",\r\n  measurementId: \"G-Z35QEK9S2W\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log(\"There was an error when creating user: \", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = collections => {\r\n  const transformedCollections = collections.docs.map(doc => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    };\r\n  });\r\n\r\n  return transformedCollections.reduce((accumulator, currentCollection) => {\r\n    accumulator[currentCollection.title.toLowerCase()] = currentCollection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\n// export const saveEmail = email => {\r\n//   const emailsRef = firebase.database().ref(\"newsletter-emails\");\r\n\r\n//   const newEmailRef = emailsRef.push();\r\n//   newEmailRef.set({ email });\r\n// };\r\n\r\nconst emailsRef = firestore.collection(\"newsletter-emails\");\r\n\r\nexport const saveEmail = (name, email) => {\r\n  const newEmailRef = emailsRef.push();\r\n  newEmailRef.set({ name, email });\r\n};\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}