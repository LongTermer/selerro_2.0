{"ast":null,"code":"var _jsxFileName = \"C:\\\\selerro-app\\\\selerro\\\\client\\\\src\\\\components\\\\sign-up\\\\sign-up.component.jsx\";\nimport React, { useState } from \"react\";\nimport \"./sign-up.styles.scss\";\nimport FormInput from \"../form-input/form-input.component.jsx\";\nimport CustomButton from \"../custom-button/custom-button.component.jsx\";\nimport { signUpStart } from \"../../redux/user/user.actions.js\";\nimport { connect } from \"react-redux\";\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  const [userInfo, setUserInfo] = useState({\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = userInfo;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"Passwords Don't Match, Please Try Again!\");\n      return;\n    }\n\n    signUpStart({\n      displayName,\n      email,\n      password\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserInfo({ ...userInfo,\n      [name]: value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"sign-up\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"I do not have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Sign up with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"displayName\",\n    type: \"text\",\n    label: \"Display Name\",\n    onChange: handleChange,\n    value: displayName,\n    spellCheck: \"false\",\n    autoComplete: \"on\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    onChange: handleChange,\n    value: email,\n    spellCheck: \"false\",\n    autoComplete: \"on\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    onChange: handleChange,\n    value: password,\n    spellCheck: \"false\",\n    autoComplete: \"on\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"confirmPassword\",\n    type: \"password\",\n    label: \"Confirm Password\",\n    onChange: handleChange,\n    value: confirmPassword,\n    spellCheck: \"false\",\n    autoComplete: \"on\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"SIGN UP\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userInfo => dispatch(signUpStart(userInfo))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["C:/selerro-app/selerro/client/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","FormInput","CustomButton","signUpStart","connect","SignUp","userInfo","setUserInfo","displayName","email","password","confirmPassword","handleSubmit","event","preventDefault","alert","handleChange","name","value","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./sign-up.styles.scss\";\r\nimport FormInput from \"../form-input/form-input.component.jsx\";\r\nimport CustomButton from \"../custom-button/custom-button.component.jsx\";\r\nimport { signUpStart } from \"../../redux/user/user.actions.js\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst SignUp = ({ signUpStart }) => {\r\n  const [userInfo, setUserInfo] = useState({\r\n    displayName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\"\r\n  });\r\n\r\n  const { displayName, email, password, confirmPassword } = userInfo;\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      alert(\"Passwords Don't Match, Please Try Again!\");\r\n      return;\r\n    }\r\n\r\n    signUpStart({ displayName, email, password });\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    setUserInfo({ ...userInfo, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"sign-up\">\r\n      <h2 className=\"title\">I do not have an account</h2>\r\n      <span>Sign up with your email and password</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput\r\n          name=\"displayName\"\r\n          type=\"text\"\r\n          label=\"Display Name\"\r\n          onChange={handleChange}\r\n          value={displayName}\r\n          spellCheck=\"false\"\r\n          autoComplete=\"on\"\r\n        />\r\n        <FormInput\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          onChange={handleChange}\r\n          value={email}\r\n          spellCheck=\"false\"\r\n          autoComplete=\"on\"\r\n        />\r\n        <FormInput\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          onChange={handleChange}\r\n          value={password}\r\n          spellCheck=\"false\"\r\n          autoComplete=\"on\"\r\n        />\r\n        <FormInput\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          label=\"Confirm Password\"\r\n          onChange={handleChange}\r\n          value={confirmPassword}\r\n          spellCheck=\"false\"\r\n          autoComplete=\"on\"\r\n        />\r\n        <CustomButton type=\"submit\">SIGN UP</CustomButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  signUpStart: userInfo => dispatch(signUpStart(userInfo))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp);\r\n"]},"metadata":{},"sourceType":"module"}