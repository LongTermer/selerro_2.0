{"ast":null,"code":"import { takeLatest, put, call, all, select } from \"redux-saga/effects\";\nimport { UserActionTypes } from \"../user/user.types.js\";\nimport { clearCart, setCartFromFirebase } from \"./cart.actions.js\";\nimport { getUserCartRef } from \"../../firebase/firebase.utils\";\nimport { CartActionTypes } from \"./cart.types\";\nimport { selectCurrentUser } from \"../user/user.selectors\";\nimport { selectCartItems } from \"./cart.selectors\";\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["C:/Selerro/selerro_2.0/src/redux/cart/cart.sagas.js"],"names":["takeLatest","put","call","all","select","UserActionTypes","clearCart","setCartFromFirebase","getUserCartRef","CartActionTypes","selectCurrentUser","selectCartItems","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,mBAA/C;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMX,GAAG,CAACK,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUO,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACM,iBAAD,CAAhC;;AAEA,MAAII,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMP,cAAc,CAACM,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACO,eAAD,CAA9B;AACA,YAAMI,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMT,OAAO,GAAG,MAAMP,cAAc,CAACgB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMzB,GAAG,CAACM,mBAAmB,CAACkB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACD;AAED,OAAO,UAAUW,gBAAV,GAA6B;AAClC,QAAM5B,UAAU,CAACK,eAAe,CAACwB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC9B,QAAM9B,UAAU,CAACK,eAAe,CAAC0B,eAAjB,EAAkCT,qBAAlC,CAAhB;AACD;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC9B,QAAMhC,UAAU,CACd,CACES,eAAe,CAACwB,QADlB,EAEExB,eAAe,CAACyB,WAFlB,EAGEzB,eAAe,CAAC0B,oBAHlB,CADc,EAMdtB,oBANc,CAAhB;AAQD;AAED,OAAO,UAAUuB,SAAV,GAAsB;AAC3B,QAAMjC,GAAG,CAAC,CAACD,IAAI,CAAC0B,gBAAD,CAAL,EAAyB1B,IAAI,CAAC8B,YAAD,CAA7B,EAA6C9B,IAAI,CAAC4B,YAAD,CAAjD,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, call, all, select } from \"redux-saga/effects\";\r\nimport { UserActionTypes } from \"../user/user.types.js\";\r\nimport { clearCart, setCartFromFirebase } from \"./cart.actions.js\";\r\nimport { getUserCartRef } from \"../../firebase/firebase.utils\";\r\nimport { CartActionTypes } from \"./cart.types\";\r\nimport { selectCurrentUser } from \"../user/user.selectors\";\r\nimport { selectCartItems } from \"./cart.selectors\";\r\n\r\nexport function* clearCartOnSignOut() {\r\n  yield put(clearCart());\r\n}\r\n\r\nexport function* updateCartInFirebase() {\r\n  const currentUser = yield select(selectCurrentUser);\r\n\r\n  if (currentUser) {\r\n    try {\r\n      const cartRef = yield getUserCartRef(currentUser.id);\r\n      const cartItems = yield select(selectCartItems);\r\n      yield cartRef.update({ cartItems });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport function* checkCartFromFirebase({ payload: user }) {\r\n  const cartRef = yield getUserCartRef(user.id);\r\n  const cartSnapshot = yield cartRef.get();\r\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\r\n}\r\n\r\nexport function* onSignOutSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\r\n}\r\n\r\nexport function* onUserSignIn() {\r\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\r\n}\r\n\r\nexport function* onCartChange() {\r\n  yield takeLatest(\r\n    [\r\n      CartActionTypes.ADD_ITEM,\r\n      CartActionTypes.REMOVE_ITEM,\r\n      CartActionTypes.CLEAR_ITEM_FROM_CART\r\n    ],\r\n    updateCartInFirebase\r\n  );\r\n}\r\n\r\nexport function* cartSagas() {\r\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}