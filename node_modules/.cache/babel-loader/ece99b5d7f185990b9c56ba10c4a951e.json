{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport { UserActionTypes } from \"../user/user.types.js\";\nimport { clearCart } from \"./cart.actions.js\";\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["C:/selerro-app/selerro/client/src/redux/cart/cart.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","clearCart","clearCartOnSignOut","updateCartInFirebase","currentUser","select","selectCurrentUser","cartRef","getUserCartRef","id","cartItems","selectCartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","setCartFromFirebase","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","CartActionTypes","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAML,GAAG,CAACI,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUE,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMC,MAAM,CAACC,iBAAD,CAAhC;;AAEA,MAAIF,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMG,OAAO,GAAG,MAAMC,cAAc,CAACJ,WAAW,CAACK,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAML,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMJ,OAAO,CAACK,MAAR,CAAe;AAAEF,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMX,OAAO,GAAG,MAAMC,cAAc,CAACU,IAAI,CAACT,EAAN,CAApC;AACA,QAAMU,YAAY,GAAG,MAAMZ,OAAO,CAACa,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACwB,mBAAmB,CAACF,YAAY,CAACG,IAAb,GAAoBZ,SAArB,CAApB,CAAT;AACD;AAED,OAAO,UAAUa,gBAAV,GAA6B;AAClC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,gBAAjB,EAAmCtB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUuB,YAAV,GAAyB;AAC9B,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,eAAjB,EAAkCV,qBAAlC,CAAhB;AACD;AAED,OAAO,UAAUW,YAAV,GAAyB;AAC9B,QAAM/B,UAAU,CACd,CACEgC,eAAe,CAACC,QADlB,EAEED,eAAe,CAACE,WAFlB,EAGEF,eAAe,CAACG,oBAHlB,CADc,EAMd5B,oBANc,CAAhB;AAQD;AAED,OAAO,UAAU6B,SAAV,GAAsB;AAC3B,QAAMjC,GAAG,CAAC,CAACD,IAAI,CAACyB,gBAAD,CAAL,EAAyBzB,IAAI,CAAC6B,YAAD,CAA7B,EAA6C7B,IAAI,CAAC2B,YAAD,CAAjD,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, call, all } from \"redux-saga/effects\";\r\nimport { UserActionTypes } from \"../user/user.types.js\";\r\nimport { clearCart } from \"./cart.actions.js\";\r\n\r\nexport function* clearCartOnSignOut() {\r\n  yield put(clearCart());\r\n}\r\n\r\nexport function* updateCartInFirebase() {\r\n  const currentUser = yield select(selectCurrentUser);\r\n\r\n  if (currentUser) {\r\n    try {\r\n      const cartRef = yield getUserCartRef(currentUser.id);\r\n      const cartItems = yield select(selectCartItems);\r\n      yield cartRef.update({ cartItems });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport function* checkCartFromFirebase({ payload: user }) {\r\n  const cartRef = yield getUserCartRef(user.id);\r\n  const cartSnapshot = yield cartRef.get();\r\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\r\n}\r\n\r\nexport function* onSignOutSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\r\n}\r\n\r\nexport function* onUserSignIn() {\r\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\r\n}\r\n\r\nexport function* onCartChange() {\r\n  yield takeLatest(\r\n    [\r\n      CartActionTypes.ADD_ITEM,\r\n      CartActionTypes.REMOVE_ITEM,\r\n      CartActionTypes.CLEAR_ITEM_FROM_CART\r\n    ],\r\n    updateCartInFirebase\r\n  );\r\n}\r\n\r\nexport function* cartSagas() {\r\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}